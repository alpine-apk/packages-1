--- a/osdep/PortMapper.cpp
+++ b/osdep/PortMapper.cpp
@@ -46,13 +46,16 @@
 #ifdef ZT_USE_SYSTEM_MINIUPNPC
 #include <miniupnpc/miniupnpc.h>
 #include <miniupnpc/upnpcommands.h>
+#include <miniupnpc/upnperrors.h>
 #else
 #ifdef __ANDROID__
 #include "miniupnpc.h"
 #include "upnpcommands.h"
+#include "upnperrors.h"
 #else
 #include "../ext/miniupnpc/miniupnpc.h"
 #include "../ext/miniupnpc/upnpcommands.h"
+#include "../ext/miniupnpc/upnperrors.h"
 #endif
 #endif
 
@@ -95,8 +98,8 @@ public:
 			// NAT-PMP mode (preferred)
 			// ---------------------------------------------------------------------
 			if (mode == 0) {
-			  natpmp_t natpmp;
-			  natpmpresp_t response;
+				natpmp_t natpmp;
+				natpmpresp_t response;
 				int r = 0;
 
 				bool natPmpSuccess = false;
@@ -108,26 +111,40 @@ public:
 					memset(&natpmp,0,sizeof(natpmp));
 					memset(&response,0,sizeof(response));
 
-					if (initnatpmp(&natpmp,0,0) != 0) {
+					if ((r = initnatpmp(&natpmp,0,0)) < 0) {
 						mode = 1;
 						closenatpmp(&natpmp);
 #ifdef ZT_PORTMAPPER_TRACE
-                        PM_TRACE("PortMapper: NAT-PMP: init failed, switching to UPnP mode" ZT_EOL_S);
+                        PM_TRACE("PortMapper: NAT-PMP: init failed, %s switching to UPnP mode" ZT_EOL_S, strnatpmperr(r));
 #endif
 						break;
 					}
 
 					InetAddress publicAddress;
-					sendpublicaddressrequest(&natpmp);
+					if ((r = sendpublicaddressrequest(&natpmp)) < 0) {
+#ifdef ZT_PORTMAPPER_TRACE
+						PM_TRACE("PortMapper: NAT-PMP: sendpublicaddressrequest: %s" ZT_EOL_S, strnatpmperr(r));
+#endif
+					}
 					int64_t myTimeout = OSUtils::now() + 5000;
 					do {
 						fd_set fds;
 						struct timeval timeout;
 						FD_ZERO(&fds);
 						FD_SET(natpmp.s, &fds);
-						getnatpmprequesttimeout(&natpmp, &timeout);
+						if ((r = getnatpmprequesttimeout(&natpmp, &timeout)) < 0) {
+#ifdef ZT_PORTMAPPER_TRACE
+							PM_TRACE("PortMapper: NAT-PMP: getnatpmprequesttimeout: %s" ZT_EOL_S, strnatpmperr(r));
+#endif
+						}
 						select(FD_SETSIZE, &fds, NULL, NULL, &timeout);
-						r = readnatpmpresponseorretry(&natpmp, &response);
+						if ((r = readnatpmpresponseorretry(&natpmp, &response)) < 0) {
+							if (r != NATPMP_TRYAGAIN) {
+#ifdef ZT_PORTMAPPER_TRACE
+								PM_TRACE("PortMapper: NAT-PMP: readnatpmpresponseorretry: %s" ZT_EOL_S, strnatpmperr(r));
+#endif
+							}
+						}
 						if (OSUtils::now() >= myTimeout)
 							break;
 					} while (r == NATPMP_TRYAGAIN);
@@ -141,19 +158,34 @@ public:
 						break;
 					}
 
-				  sendnewportmappingrequest(&natpmp,NATPMP_PROTOCOL_UDP,localPort,tryPort,(ZT_PORTMAPPER_REFRESH_DELAY * 2) / 1000);
+					r = sendnewportmappingrequest(&natpmp,NATPMP_PROTOCOL_UDP,localPort,tryPort,(ZT_PORTMAPPER_REFRESH_DELAY * 2) / 1000);
+					if (r < 0) {
+#ifdef ZT_PORTMAPPER_TRACE
+						PM_TRACE("PortMapper: NAT-PMP: sendnewportmappingrequest: %s" ZT_EOL_S, strnatpmperr(r));
+#endif
+					}
 					myTimeout = OSUtils::now() + 10000;
 					do {
-				    fd_set fds;
-				    struct timeval timeout;
-				    FD_ZERO(&fds);
-				    FD_SET(natpmp.s, &fds);
-				    getnatpmprequesttimeout(&natpmp, &timeout);
-				    select(FD_SETSIZE, &fds, NULL, NULL, &timeout);
-				    r = readnatpmpresponseorretry(&natpmp, &response);
+						fd_set fds;
+						struct timeval timeout;
+						FD_ZERO(&fds);
+						FD_SET(natpmp.s, &fds);
+						if ((r = getnatpmprequesttimeout(&natpmp, &timeout)) < 0) {
+#ifdef ZT_PORTMAPPER_TRACE
+							PM_TRACE("PortMapper: NAT-PMP: getnatpmprequesttimeout: %s" ZT_EOL_S, strnatpmperr(r));
+#endif
+						}
+						select(FD_SETSIZE, &fds, NULL, NULL, &timeout);
+						if ((r = readnatpmpresponseorretry(&natpmp, &response)) < 0) {
+							if (r != NATPMP_TRYAGAIN) {
+#ifdef ZT_PORTMAPPER_TRACE
+								PM_TRACE("PortMapper: NAT-PMP: readnatpmpresponseorretry: %s" ZT_EOL_S, strnatpmperr(r));
+#endif
+							}
+						}
 						if (OSUtils::now() >= myTimeout)
 							break;
-				  } while (r == NATPMP_TRYAGAIN);
+					} while (r == NATPMP_TRYAGAIN);
 					if (r == 0) {
 						publicAddress.setPort(response.pnu.newportmapping.mappedpublicport);
 #ifdef ZT_PORTMAPPER_TRACE
@@ -192,8 +224,33 @@ public:
 				struct UPNPUrls urls;
 				struct IGDdatas data;
 
+				int getValidIGD_ret = 0;
 				int upnpError = 0;
-				UPNPDev *devlist = upnpDiscoverAll(5000,(const char *)0,(const char *)0,0,0,2,&upnpError);
+				UPNPDev *devlist = nullptr;
+				UPNPDev *tmplist = nullptr;
+				for (int ipv6 = 0; ipv6 <= 1; ++ipv6) {
+					tmplist = upnpDiscoverAll(5000,(const char *)nullptr,(const char *)nullptr,UPNP_LOCAL_PORT_ANY,ipv6,2,&upnpError);
+					if (upnpError != UPNPDISCOVER_SUCCESS || tmplist == nullptr) {
+#ifdef ZT_PORTMAPPER_TRACE
+						PM_TRACE("PortMapper: UPnP: ipv6(%d) upnpDiscoverAll: %s or tmplist is empty" ZT_EOL_S, ipv6, strupnperror(upnpError));
+#endif
+					} else {
+						// found list, concat them
+						if (devlist == nullptr) {
+#ifdef ZT_PORTMAPPER_TRACE
+							PM_TRACE("PortMapper: UPnP: ipv6(%d) empty devlist" ZT_EOL_S, ipv6);
+#endif
+							devlist = tmplist;
+						} else {
+#ifdef ZT_PORTMAPPER_TRACE
+							PM_TRACE("PortMapper: UPnP: ipv6(%d) concat devlist" ZT_EOL_S, ipv6);
+#endif
+							UPNPDev *tmp = nullptr;
+							for(tmp = devlist; tmp->pNext != NULL; tmp = tmp->pNext);
+							tmp->pNext = tmplist;
+						}
+					}
+				}
 				if (devlist) {
 
 #ifdef ZT_PORTMAPPER_TRACE
@@ -212,7 +269,7 @@ public:
 					memset(&data,0,sizeof(data));
 					OSUtils::ztsnprintf(inport,sizeof(inport),"%d",localPort);
 
-					if ((UPNP_GetValidIGD(devlist,&urls,&data,lanaddr,sizeof(lanaddr)))&&(lanaddr[0])) {
+					if ((getValidIGD_ret = UPNP_GetValidIGD(devlist,&urls,&data,lanaddr,sizeof(lanaddr)))&&(lanaddr[0])) {
 #ifdef ZT_PORTMAPPER_TRACE
                         PM_TRACE("PortMapper: UPnP: my LAN IP address: %s" ZT_EOL_S,lanaddr);
 #endif
@@ -289,6 +346,9 @@ public:
 					}
 
 					freeUPNPDevlist(devlist);
+					if (getValidIGD_ret != 0) {
+						FreeUPNPUrls(&urls);
+					}
 
 				} else {
 					mode = 0;
