--- a/one.cpp
+++ b/one.cpp
@@ -145,6 +145,8 @@ static void cliPrintHelp(const char *pn,
 	fprintf(out,"  orbit <world ID> <seed> - Join a moon via any member root" ZT_EOL_S);
 	fprintf(out,"  deorbit <world ID>      - Leave a moon" ZT_EOL_S);
 	fprintf(out,"  dump                    - Debug settings dump for support" ZT_EOL_S);
+	fprintf(out,"  resyncnetwork <network ID>  - Re-apply network settings (OpenWrt)" ZT_EOL_S);
+	fprintf(out,"       NOTE: this command does NOT re-read <network ID>.local.conf" ZT_EOL_S);
 	fprintf(out,ZT_EOL_S"Available settings:" ZT_EOL_S);
 	fprintf(out,"  Settings to use with [get/set] may include property names from " ZT_EOL_S);
 	fprintf(out,"  the JSON output of \"zerotier-cli -j listnetworks\". Additionally, " ZT_EOL_S);
@@ -856,6 +858,34 @@ static int cli(int argc,char **argv)
 			}
 			return 0;
 		} else {
+			printf("%u %s %s" ZT_EOL_S,scode,command.c_str(),responseBody.c_str());
+			return 1;
+		}
+	} else if (command == "resyncnetwork") {
+		if (arg1.length() != 16) {
+			printf("invalid network id" ZT_EOL_S);
+			return 2;
+		}
+		requestHeaders["Content-Type"] = "application/json";
+		requestHeaders["Content-Length"] = "2";
+		unsigned int scode = Http::POST(
+			1024 * 1024 * 16,
+			60000,
+			(const struct sockaddr *)&addr,
+			(std::string("/resyncnetwork/") + arg1).c_str(),
+			requestHeaders,
+			"{}",
+			2,
+			responseHeaders,
+			responseBody);
+		if (scode == 200) {
+			if (json) {
+				printf("%s",cliFixJsonCRs(responseBody).c_str());
+			} else {
+				printf("200 resyncnetwork OK" ZT_EOL_S);
+			}
+			return 0;
+		} else {
 			printf("%u %s %s" ZT_EOL_S,scode,command.c_str(),responseBody.c_str());
 			return 1;
 		}
--- a/service/OneService.cpp
+++ b/service/OneService.cpp
@@ -1778,6 +1778,26 @@ public:
 		_controlPlane.Post("/network/([0-9a-fA-F]{16})", networkPost);
 		_controlPlane.Put("/network/([0-9a-fA-F]){16}", networkPost);
 
+		auto resyncnetworkPost = [&, setContent](const httplib::Request &req, httplib::Response &res) {
+			auto input = req.matches[1];
+			uint64_t wantnw = Utils::hexStrToU64(input.str().c_str());
+			_node->join(wantnw, (void*)0, (void*)0);
+			auto out = json::object();
+			Mutex::Lock l(_nets_m);
+			if (!_nets.empty()) {
+				NetworkState &ns = _nets[wantnw];
+				setNetworkSettings(wantnw, ns.settings());
+				if (ns.tap()) {
+					syncManagedStuff(ns,true,true,true);
+				}
+
+				_networkToJson(out, ns);
+			}
+			out["resyncnetworkresult"] = true;
+			setContent(req, res, out.dump());
+		};
+		_controlPlane.Post("/resyncnetwork/([0-9a-fA-F]{16})", resyncnetworkPost);
+
 		_controlPlane.Delete("/network/([0-9a-fA-F]{16})", [&, setContent](const httplib::Request &req, httplib::Response &res) {
 			auto input = req.matches[1];
 			auto out = json::object();
